---
layout:
---
ABBAURL={{ site.github.url }}
TEMPLATES=default:cerulean:cosmo:cyborg:darkly:flatly:journal:lumen:paper:readable:sandstone:simplex:slate:spacelab:superhero:united:yeti

# Self remove on exit
trap "rm $0" EXIT

# Check if template name is valid
# $1: Template name
# return: Valid template name or empty
check_template() {
	local TEMPLATE=${1}
	# If empty, set to default
	[ -z "${TEMPLATE}" ] && TEMPLATE=default
	# If a number, set to the template associated name
	[ ${TEMPLATE} -eq ${TEMPLATE} ] 2>/dev/null && TEMPLATE=$(echo ${TEMPLATES} | awk -F: '{ print $'${TEMPLATE}' }')
	# If a string, check if it's a template in the list
	echo ${TEMPLATES} | awk -F: '{ for (i = 1; i <= NF; i++) if ($i == "'${TEMPLATE}'") print $i }'
}

# Manage arguments
[ -n "${1}" ] && TEMPLATE=$(check_template ${1})

# If no valid template in arguments
if [ -z "${TEMPLATE}" ]
then
	# Print the template list
	echo ${TEMPLATES} | awk -F: '{ for (i = 1; i <= NF; i++) print i ") " $i }'

	while true
	do
		# Ask wanted template. Could be empty, a number or a string
		read -p "What template do you want to use? [default] " TEMPLATE
		# Check template name
		TEMPLATE=$(check_template ${TEMPLATE})
		# If not empty, go to next step
		[ -n "${TEMPLATE}" ] && break
	done
fi

# Check if we have enough permissions
while true
do
	# Try to modify current directory
	${SUDO} touch . 2>/dev/null
	# If failed try with sudo
	[ $? = 0 ] && break || SUDO=sudo
done

# Remove the abba directory if already exist
[ -d .abba ] && ${SUDO} rm -rf .abba

# Create the abba directory
${SUDO} mkdir -p .abba/css .abba/js .abba/fonts

# Remove favicon
${SUDO} rm -f favicon.ico

# Ask before replace htaccess
[ -f .htaccess ] && ${SUDO} rm -i .htaccess
[ -f .htaccess ] || ${SUDO} curl -sL ${ABBAURL}/dist/htaccess -o .htaccess

# Download the needed files
${SUDO} curl -sL ${ABBAURL}/favicon.ico -o favicon.ico && \
${SUDO} curl -sL ${ABBAURL}/dist/header.shtml -o .abba/header.shtml && \
${SUDO} curl -sL ${ABBAURL}/dist/footer.shtml -o .abba/footer.shtml && \
${SUDO} curl -sL ${ABBAURL}/dist/error_401.shtml -o .abba/error_401.shtml && \
${SUDO} curl -sL ${ABBAURL}/dist/error_403.shtml -o .abba/error_403.shtml && \
${SUDO} curl -sL ${ABBAURL}/dist/error_404.shtml -o .abba/error_404.shtml && \
${SUDO} curl -sL ${ABBAURL}/dist/error_500.shtml -o .abba/error_500.shtml && \
${SUDO} curl -sL ${ABBAURL}/dist/js/iefix.js -o .abba/js/iefix.js && \
${SUDO} curl -sL ${ABBAURL}/dist/js/script.js -o .abba/js/script.js && \
${SUDO} curl -sL ${ABBAURL}/dist/css/${TEMPLATE}.css -o .abba/css/style.css && \
${SUDO} curl -sL ${ABBAURL}/dist/fonts/icon.eot -o .abba/fonts/icon.eot && \
${SUDO} curl -sL ${ABBAURL}/dist/fonts/icon.ttf -o .abba/fonts/icon.ttf && \
${SUDO} curl -sL ${ABBAURL}/dist/fonts/icon.woff -o .abba/fonts/icon.woff && \
${SUDO} curl -sL ${ABBAURL}/dist/fonts/icon.svg -o .abba/fonts/icon.svg && \
true || { echo >&2 "Failed to install abba"; false; }
